# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: pintagram # NOTE: update this with your service name

custom:
  paremetersFile: ${env:PARAMETERS_FILE, './parameters.yml'}
  parameters: ${file(${self:custom.paremetersFile})}
  customDomain:
    domainName: ${self:custom.parameters.domainName}
    certificateName: ${self:custom.parameters.certificateName}
    certificateArn: ${self:custom.parameters.certificateArn}
    createRoute53Record: false

provider:
  name: aws
  runtime: nodejs8.10
  region: eu-west-1
  usagePlan:
    quota:
      limit: 5000
      period: DAY
    throttle:
      burstLimit: 200
      rateLimit: 100

functions:
  migrate:
    handler: migrateHandler.migrate
    timeout: 60
    vpc:
      securityGroupIds: ${self:custom.parameters.securityGroupIds}
      subnetIds: ${self:custom.parameters.subnetIds}
    environment:
      DB_URL: ${self:resources.Outputs.DbUrl.Value}
      DB_PORT: ${self:resources.Outputs.DbPort.Value}
      DB_USER: ${self:custom.parameters.dbUsername}
      DB_PASSWORD: ${self:custom.parameters.dbPassword}
  api:
    handler: handler.router
    timeout: 30
    vpc:
      securityGroupIds: ${self:custom.parameters.securityGroupIds}
      subnetIds: ${self:custom.parameters.subnetIds}
    environment:
      DB_URL: ${self:resources.Outputs.DbUrl.Value}
      DB_PORT: ${self:resources.Outputs.DbPort.Value}
      DB_USER: ${self:custom.parameters.dbUsername}
      DB_PASSWORD: ${self:custom.parameters.dbPassword}
      JWT_SECRET_KEY: ${self:custom.parameters.jwtSecretKey}
      ALLOW_ORIGIN: ${self:custom.parameters.allowOrigin}
    events:
      - http:
          path: register
          method: post
          cors: true
      - http:
          path: login
          method: post
          cors: true
      - http:
          path: user
          method: get
          cors: true
      - http:
          path: users
          method: get
          cors: true
      - http:
          path: users/{username}
          method: get
          cors: true
      - http:
          path: users/{username}/posts
          method: get
          cors: true
      - http:
          path: follow
          method: post
          cors: true
      - http:
          path: unfollow
          method: post
          cors: true
      - http:
          path: followings
          method: get
          cors: true
      - http:
          path: timeline
          method: get
          cors: true
      - http:
          path: lines
          method: get
          cors: true
      - http:
          path: posts
          method: post
          cors: true
      - http:
          path: posts/{id}
          method: delete
          cors: true
      - http:
          path: posts/{id}/likes
          method: post
          cors: true
      - http:
          path: posts/{id}/likes
          method: delete
          cors: true

resources:
  Resources:
    DB:
      Type: AWS::RDS::DBCluster
      Properties:
        Engine: aurora
        EngineMode: serverless
        MasterUsername: ${self:custom.parameters.dbUsername}
        MasterUserPassword: ${self:custom.parameters.dbPassword}
        ScalingConfiguration:
          MinCapacity: 2
          MaxCapacity: 8
  Outputs:
    DbUrl:
      Value: 
        "Fn::GetAtt": [DB, Endpoint.Address]
    DbPort:
      Value: 
        "Fn::GetAtt": [DB, Endpoint.Port]

plugins:
  - serverless-domain-manager